// ReSharper disable UnusedParameter
// ReSharper disable InconsistentNaming
(function (testFns) {
    "use strict";

    /*=========== SaveQueuing Module ===================*/
    var moduleOptions = {
        setup: function () {
        },
        teardown: function () {
        }
    };
    module("saveQueuing", moduleOptions);

    /*********************************************************
    * overwrites same value in added entity that is changed while saving
    * when that save completes before the modified entity is saved
    * This is standard behavior, w/ or w/o saveQueuing
    *********************************************************/
    asyncTest("two subsequent fast save operations on a odata source using save queue", function () {
        expect(1);

        Q.stopUnhandledRejectionTracking();
        var DT = breeze.DataType;
        var Identity = breeze.AutoGeneratedKeyType.Identity;
        var entityTypeCustomer = {
            shortName: 'IOZCustomer',
            namespace: 'NorthwindModel',
            autoGeneratedKeyType: Identity,
            defaultResourceName: 'IOZCustomers',
            dataProperties: {
                Id: { dataType: DT.String, isPartOfKey: true },
                Name: {}
            }
        };

        breeze.NamingConvention.none.setAsDefault();
        var adapter = breeze.config.initializeAdapterInstance('dataService', 'webApiOData', true);
        // create a new EntityManager  
        var ds = new breeze.DataService({
            serviceName: "http://localhost:56337/odata/",
            hasServerMetadata: false
        });

        var manager = new breeze.EntityManager({ dataService: ds });
        manager.metadataStore.addEntityType(entityTypeCustomer);
        var customerQuery = breeze.EntityQuery.from('IOZCustomers').take(1);
        manager.enableSaveQueuing(true);
        manager.executeQuery(customerQuery)
            .then(fastUpdate)
            .then(requery)
            .then(success)
            .fail(function (error) {
                console.log(error);
            })
            .finally(start);

        function fastUpdate(data) {
            var item = null;
            if (data.results !== undefined && data.results.length > 0) {
                console.log('data');
                item = data.results[0];
                item.setProperty('Name', 'Modified 1');
                manager.saveChanges();
                item.setProperty('Name', 'Modified 2');
                return manager.saveChanges();
            } else {
                console.log("invalid result");
            }
        }

        function requery(data) {
            console.log('req');
            return breeze.EntityQuery.from('IOZCustomers').using(manager).take(1).execute();
        }

        function success(data) {
            console.log(data.results[0].getProperty('Name'));
            equal(data.results[0].getProperty('Name'), 'Modified 2', "Name has the saved (modified) value");
        }


    });

})(docCode.testFns);