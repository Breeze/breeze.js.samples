/**
 * CCJS Model Metadata by hand from John Papa's PluralSight Course
 * "Building Data-Centric Single Page Applications with Breeze"
 * http://www.pluralsight.com/courses/table-of-contents/building-single-page-applications-breeze
 *
 * Adapted for DocCode
 */
// ReSharper disable InconsistentNaming
(function (testFns) {
    'use strict';

    testFns.ccjsFillMetadataStore = fillMetadataStore;

    /////// Create and configure a Metadata-Helper instance //////////

    // 'Identity' is the default key generation strategy for this app
    var keyGen = breeze.AutoGeneratedKeyType.Identity;
    // namespace of the corresponding classes on the server
    var namespace = 'CC.Model';

    // Breeze Labs: breeze.metadata.helper.js
    // https://github.com/IdeaBlade/Breeze/blob/master/Breeze.Client/Scripts/Labs/breeze.metadata-helper.js
    // The helper reduces data entry by applying common conventions
    // and converting common abbreviations (e.g., 'type' -> 'dataType')
    var helper = new breeze.config.MetadataHelper(namespace, keyGen);

    /////////////////
    function fillMetadataStore(store) {

        // DataTypes
        var DT = breeze.DataType;
        var BOOL = DT.Boolean;
        var DATE = DT.DateTime;
        var ID = DT.Int32;

        // type order is irrelevant
        addPerson();
        addSession();
        addRoom();
        addTimeSlot();
        addTrack();

        // addType - make it easy to add the type to the store using the helper
        function addType(type) {
            helper.addTypeToStore(store, type);
        };

        function addPerson() {
            addType({
                name: 'Person',
                dataProperties: {
                    id: { type: ID },
                    firstName: { max: 50, required: true },
                    lastName: { max: 50, required: true },
                    // could add validators here; let model.validation add them
                    email: { max: 400 },
                    blog: { max: 400 },
                    twitter: { max: 400 },
                    gender: { max: 1 },
                    imageSource: { max: 400 },

                    // could let Breeze add unmapped but we do so to lock in the Boolean data type
                    isPartial: { type: BOOL, required: true, isUnmapped: true },
                    isSpeaker: { type: BOOL, required: true, isUnmapped: true }
                },

                navigationProperties: {
                    speakerSessions: { type: 'Session', hasMany: true }
                }
            });
        }

        function addSession() {
            addType({
                name: 'Session',
                dataProperties: {
                    id: { type: ID },
                    title: { max: 50, required: true },
                    code: { max: 10 },
                    description: { max: 4000 },
                    level: { max: 30 },
                    tags: { max: 4000 },

                    roomId: { type: ID, required: true },
                    speakerId: { type: ID, required: true },
                    timeSlotId: { type: ID, required: true },
                    trackId: { type: ID, required: true },

                    isPartial: { type: BOOL, required: true, isUnmapped: true }
                },

                // Let model.validation add the requireReferenceEntity validators
                navigationProperties: {
                    room: 'Room',
                    speaker: 'Person',
                    timeSlot: 'TimeSlot',
                    track: 'Track'
                }

            });
        }

        function addRoom() {
            addType({
                name: 'Room',
                dataProperties: {
                    id: { type: ID },
                    name: { max: 50, required: true }
                }
            });
        }

        function addTimeSlot() {
            addType({
                name: 'TimeSlot',
                dataProperties: {
                    id: { type: ID },
                    start: { type: DATE, required: true },
                    isSessionSlot: { type: BOOL, required: true },
                    duration: { type: ID, required: true }
                }
            });
        }

        function addTrack() {
            addType({
                name: 'Track',
                dataProperties: {
                    id: { type: ID },
                    name: { max: 50, required: true }
                }
            });
        }
    }
})(docCode.testFns);